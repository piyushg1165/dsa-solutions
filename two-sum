https://leetcode.com/problems/two-sum/description/


// method 1 using hashmap

vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> mpp;
        int n = nums.size();
        for(int i=0; i<n; i++)
        {
            int num = nums[i];
            int moreNeeded = target - num;
            if(mpp.find(moreNeeded) != mpp.end())
            {
                return {mpp[moreNeeded] , i};
            }
            mpp[num] = i;
        }
        return {-1 , -1};
    }

// method 2 using two pointers

vector<int> twoSum(vector<int>& nums, int target) {
        sort(nums.begin() , nums.end());
        int i = 0;
        int j = nums.size() - 1;
        while(i < j)
        {
            if(nums[i] + nums[j] == target)
            return yes;
            else if(nums[i] + nums[j] < target)
            {
                i++;
            }
            else if(nums[i] + nums[j] > target)
            {
                j--;
            }
        }
        return no;
    }
